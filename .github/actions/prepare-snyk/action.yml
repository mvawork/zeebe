# A reusable action to prepare common Snyk CLI arguments such as the target reference, project name,
# version, tags, etc. Outputs everything as `snyk-args`

---
name: Prepare Snyk Args
description: Prepares common Snyk arguments from the POM files found in the working directory

inputs:
  name:
    description: Sets the Snyk project name
    required: true
  target:
    description: Allows overriding the project target reference directly
    required: false

outputs:
  args:
    description: Space separated list of CLI arguments for the Snyk test or monitor command
    value: ${{ steps.info.outputs.result }}

runs:
  using: composite
  steps:
    - name: Fetch project information
      id: info
      shell: bash
      run: |
        export TARGET=$([[ ! -z '${{ inputs.target }}' ]] && echo '${{ inputs.target }}' || git rev-parse --abbrev-ref HEAD)
        export NAME='${{ inputs.name }}'
        export VERSION=$([[ ! -z '${{ inputs.version }}' ]] && echo '${{ inputs.version }}' || mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec 2>/dev/null)
        export VERSION_TAG=$([[ "${VERSION}" == *-SNAPSHOT ]] && echo 'development' || echo "${VERSION}")
        export LIFECYCLE=$([[ "${VERSION}" == *-SNAPSHOT ]] && echo 'development' || echo 'production')
        echo "result=" \
          "--severity-threshold=high" \
          "--org=team-zeebe" \
          "--project-lifecycle=${LIFECYCLE}" \
          "--project-name=${NAME}" \
          "--project-tags=version=${VERSION_TAG}" \
          "--target-reference=${TARGET}" >> $GITHUB_OUTPUT
