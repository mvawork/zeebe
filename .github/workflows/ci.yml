name: CI

on:
  push:
    branches:
      - main
      - stable/*
      - release-*
      - trying
      - staging
  pull_request: { }
  merge_group: { }
  workflow_dispatch: { }
  workflow_call: { }

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  smoke-tests:
    name: "[Smoke] ${{ matrix.os }} with ${{ matrix.arch }}"
    timeout-minutes: 20
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        arch: [ arm64 ]
        include:
          - os: linux
            runner: [ self-hosted, linux, arm64 ]
            arch: arm64
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
        with:
          go: false
          maven-extra-args: -T1C
      - uses: ./.github/actions/build-docker
        id: build-docker
        # Currently only Linux runners support building docker images without further ado
        if: ${{ runner.os == 'Linux' }}
        with:
          version: current-test
          distball: ${{ steps.build-zeebe.outputs.distball }}
          platforms: linux/${{ matrix.arch }}
          push: false
      - name: Run smoke test on ${{ matrix.arch }}
        env:
          # For non Linux runners there is no container available for testing, see build-docker job
          EXCLUDED_TEST_GROUPS: ${{ runner.os != 'Linux' && 'container' }}
        run: >
          ./mvnw -B --no-snapshot-updates
          -DskipUTs -DskipChecks -Dsurefire.rerunFailingTestsCount=3
          -pl qa/integration-tests
          -P smoke-test,extract-flaky-tests
          -D excludedGroups=$EXCLUDED_TEST_GROUPS
          verify
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: failure()
        with:
          name: "[Smoke] ${{ matrix.os }} with ${{ matrix.arch }}"
  test-summary:
    # Used by bors to check all tests, including the unit test matrix.
    # New test jobs must be added to the `needs` lists!
    # This name is hard-referenced from bors.toml; remember to update that if this name changes
    name: Test summary
    runs-on: ubuntu-latest
    needs:
      - smoke-tests
    steps:
      - run: exit 0
  event_file:
    # We need to upload the event file as an artifact in order to support
    # publishing the results of forked repositories
    # https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches
    name: "Event File"
    runs-on: ubuntu-latest
    needs:
      - smoke-tests
    if: always()
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}
          retention-days: 1
  deploy-snapshots:
    name: Deploy snapshot artifacts
    needs: [ test-summary ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/zeebe' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-maven-snapshot
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v3
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_USR;
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_PSW;
      - uses: actions/setup-java@v3.11.0
        with:
          distribution: 'temurin'
          java-version: '17'
      # Use CI Nexus as co-located pull-through cache for Maven artifacts via ~/.m2/settings.xml
      - name: 'Create settings.xml'
        uses: s4u/maven-settings-action@v2.8.0
        with:
          githubServer: false
          servers: |
            [{
              "id": "camunda-nexus",
              "username": "${{ steps.secrets.outputs.ARTIFACTS_USR }}",
              "password": "${{ steps.secrets.outputs.ARTIFACTS_PSW }}"
            }]
          mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "zeebe,zeebe-snapshots", "name": "camunda Nexus"}]'
      # compile and generate-sources to ensure that the Javadoc can be properly generated; compile is
      # necessary when using annotation preprocessors for code generation, as otherwise the symbols are
      # not resolve-able by the Javadoc generator
      - run: ./mvnw -B -D skipTests -D skipChecks compile generate-sources source:jar javadoc:jar deploy
        env:
          MAVEN_USERNAME: ${{ steps.secrets.outputs.ARTIFACTS_USR }}
          MAVEN_PASSWORD: ${{ steps.secrets.outputs.ARTIFACTS_PSW }}
  deploy-docker-snapshot:
    name: Deploy snapshot Docker image
    needs: [ test-summary ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/zeebe' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-docker-snapshot
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v3
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/zeebe/ci/zeebe REGISTRY_HUB_DOCKER_COM_PSW;
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
      - uses: ./.github/actions/build-docker
        id: build-docker
        with:
          repository: camunda/zeebe
          version: SNAPSHOT
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
  deploy-benchmark-images:
    name: Deploy benchmark images
    needs: [ test-summary ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/zeebe' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-benchmark-images
      cancel-in-progress: false
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - uses: google-github-actions/auth@v1
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/628707732411/locations/global/workloadIdentityPools/zeebe-gh-actions/providers/gha-provider'
          service_account: 'zeebe-gh-actions@zeebe-io.iam.gserviceaccount.com'
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - run: ./mvnw -B -D skipTests -D skipChecks -pl benchmarks/project -am package
      - name: Build Starter Image
        run: ./mvnw -pl benchmarks/project jib:build -P starter
      - name: Build Worker Image
        run: ./mvnw -pl benchmarks/project jib:build -P worker
  notify-if-failed:
    name: Send slack notification on build failure
    runs-on: ubuntu-latest
    needs: [ test-summary, deploy-snapshots, deploy-docker-snapshot ]
    if: failure() && github.repository == 'camunda/zeebe' && github.ref == 'refs/heads/main'
    steps:
      - id: slack-notify
        name: Send slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": ":alarm: Build on `main` failed! :alarm:\n${{ github.event.head_commit.url }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: Build on `main` failed! :alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the related commit: ${{ github.event.head_commit.url }}\n \\cc @zeebe-medic"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  auto-merge:
    # This workflow will auto merge a PR authored by dependabot[bot]. It runs only on open PRs ready for
    # review.
    #
    # It will merge the PR only if: it is authored by dependabot[bot], is a minor or patch semantic
    # update, and all CI checks are successful (ignoring the soon-to-be-removed Jenkins check).
    #
    # The workflow is divided into multiple sequential jobs to allow giving only minimal permissions to
    # the GitHub token passed around.
    #
    # Once we're using the merge queue feature, I think we can simplify this workflow a lot by relying
    # on dependabot merging PRs via its commands, as it will always wait for checks to be green before
    # merging.
    name: Auto-merge dependabot PRs
    runs-on: ubuntu-latest
    needs: [ test-summary ]
    if: github.repository == 'camunda/zeebe' && github.actor == 'dependabot[bot]'
    permissions:
      checks: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - id: metadata
        name: Fetch dependency metadata
        uses: dependabot/fetch-metadata@v1.5.1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - id: approve-and-merge
        name: Approve and merge PR
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr review ${{ github.event.pull_request.number }} --approve -b "bors merge"
        env:
          GITHUB_TOKEN: "${{secrets.GITHUB_TOKEN}}"
